What does it take to be an expert Python coder.

I watched this:
https://www.youtube.com/watch?v=7lmCu8wz8ro

This guys goes over why Python a lot of the features of Python and why it was developed in a very well designed way to allow code to be upgraded without changing it.  Decorators, contextmanagers, and generators (iterators) can all be used in locked step to add aspect oriented programming into python.  However,while comparted to say C++ and Java, Python is a model of beauty in some cases.  However, when Python 3 added optional static typing is when it become very complicated as Python didn't add the types in at first the only way
you can get type checking is if you add as many type annotations as possible, it assumes all code is any rather than having a nice type inference strategy (this was fixed in Julia).  Another odd thing is that decorators are based on "currying", yet, Python demotes partial application and currying to a library.  Ruby, Smalltalk, Lisp, (maybe Julia) and Haskell have a simplified model of decorators vs contextmanagers vs iterators:  they are all "higher order functions", however, python despite having a simple grammar has a lot of power that C#/Java programmers can't initially appreciate.  Can't wait until Python devs discover Applicatives(Monads)/Programmable Effects for changing bind and the "semicolon", and to differentiate between the different kinds of side-effects merge it with context managers & decorators for aspect oriented programming, and the ability to separate declaration and setting.  Next is Macro decorators with quasiquoting...
