Wow I'm liking this Koka language its like Ioke, Haskell, and Idris all merged together.  I was always thinking - why does Haskell mark the difference between pure and non-pure code yet it doesn't care about total vs non-total functions, and the IO Monad pretty much merges all kinds of "effects" into one.  Like pure code uses ($) while impure code uses (=<<),(<$>...<*>).  Another thing is in Haskell the "do" is only available for Monads (and perhaps Applicatives).  However, the Koka syntax is a regression to C-style syntax it seems.  

At first seen Koka handlers seem a lot like programming with Continuations (GOTO) or Co-routines.  However, after reading
more it seems that the effect handlers represent all Monads except Continuations, and since they don't include Continuations they can
do not need Monad Transformers(which is the bane of functional programming).  This is looking really really nice.  
